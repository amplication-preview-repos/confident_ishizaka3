/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { RiderBooking } from "./RiderBooking";
import { RiderBookingCountArgs } from "./RiderBookingCountArgs";
import { RiderBookingFindManyArgs } from "./RiderBookingFindManyArgs";
import { RiderBookingFindUniqueArgs } from "./RiderBookingFindUniqueArgs";
import { CreateRiderBookingArgs } from "./CreateRiderBookingArgs";
import { UpdateRiderBookingArgs } from "./UpdateRiderBookingArgs";
import { DeleteRiderBookingArgs } from "./DeleteRiderBookingArgs";
import { Ride } from "../../ride/base/Ride";
import { RiderBookingService } from "../riderBooking.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => RiderBooking)
export class RiderBookingResolverBase {
  constructor(
    protected readonly service: RiderBookingService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "RiderBooking",
    action: "read",
    possession: "any",
  })
  async _riderBookingsMeta(
    @graphql.Args() args: RiderBookingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [RiderBooking])
  @nestAccessControl.UseRoles({
    resource: "RiderBooking",
    action: "read",
    possession: "any",
  })
  async riderBookings(
    @graphql.Args() args: RiderBookingFindManyArgs
  ): Promise<RiderBooking[]> {
    return this.service.riderBookings(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => RiderBooking, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "RiderBooking",
    action: "read",
    possession: "own",
  })
  async riderBooking(
    @graphql.Args() args: RiderBookingFindUniqueArgs
  ): Promise<RiderBooking | null> {
    const result = await this.service.riderBooking(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RiderBooking)
  @nestAccessControl.UseRoles({
    resource: "RiderBooking",
    action: "create",
    possession: "any",
  })
  async createRiderBooking(
    @graphql.Args() args: CreateRiderBookingArgs
  ): Promise<RiderBooking> {
    return await this.service.createRiderBooking({
      ...args,
      data: {
        ...args.data,

        ride: args.data.ride
          ? {
              connect: args.data.ride,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RiderBooking)
  @nestAccessControl.UseRoles({
    resource: "RiderBooking",
    action: "update",
    possession: "any",
  })
  async updateRiderBooking(
    @graphql.Args() args: UpdateRiderBookingArgs
  ): Promise<RiderBooking | null> {
    try {
      return await this.service.updateRiderBooking({
        ...args,
        data: {
          ...args.data,

          ride: args.data.ride
            ? {
                connect: args.data.ride,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RiderBooking)
  @nestAccessControl.UseRoles({
    resource: "RiderBooking",
    action: "delete",
    possession: "any",
  })
  async deleteRiderBooking(
    @graphql.Args() args: DeleteRiderBookingArgs
  ): Promise<RiderBooking | null> {
    try {
      return await this.service.deleteRiderBooking(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Ride, {
    nullable: true,
    name: "ride",
  })
  @nestAccessControl.UseRoles({
    resource: "Ride",
    action: "read",
    possession: "any",
  })
  async getRide(@graphql.Parent() parent: RiderBooking): Promise<Ride | null> {
    const result = await this.service.getRide(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
