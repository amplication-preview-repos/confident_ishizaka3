/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  RiderBooking as PrismaRiderBooking,
  Ride as PrismaRide,
} from "@prisma/client";

export class RiderBookingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RiderBookingCountArgs, "select">
  ): Promise<number> {
    return this.prisma.riderBooking.count(args);
  }

  async riderBookings(
    args: Prisma.RiderBookingFindManyArgs
  ): Promise<PrismaRiderBooking[]> {
    return this.prisma.riderBooking.findMany(args);
  }
  async riderBooking(
    args: Prisma.RiderBookingFindUniqueArgs
  ): Promise<PrismaRiderBooking | null> {
    return this.prisma.riderBooking.findUnique(args);
  }
  async createRiderBooking(
    args: Prisma.RiderBookingCreateArgs
  ): Promise<PrismaRiderBooking> {
    return this.prisma.riderBooking.create(args);
  }
  async updateRiderBooking(
    args: Prisma.RiderBookingUpdateArgs
  ): Promise<PrismaRiderBooking> {
    return this.prisma.riderBooking.update(args);
  }
  async deleteRiderBooking(
    args: Prisma.RiderBookingDeleteArgs
  ): Promise<PrismaRiderBooking> {
    return this.prisma.riderBooking.delete(args);
  }

  async getRide(parentId: string): Promise<PrismaRide | null> {
    return this.prisma.riderBooking
      .findUnique({
        where: { id: parentId },
      })
      .ride();
  }
}
